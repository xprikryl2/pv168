/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dragonrental.gui;

import dragonrental.backend.*;
import dragonrental.common.*;
import java.math.BigDecimal;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;

/**
 *
 * @author zuz
 */
public class NewReservationDialog extends javax.swing.JDialog {

    private DragonManager dragonManager;
    private PersonManager personManager;
    private ReservationManager reservationManager;
    private ResourceBundle bundle = ResourceBundle.getBundle("dragonrental/gui/language");
    private ReservationsTableModel model;
    
    /**
     * Creates new form NewDragonDialog
     */
    public NewReservationDialog(java.awt.Frame parent, boolean modal, DragonManager dManager, PersonManager pManager, ReservationManager rManager, ReservationsTableModel model) {
        super(parent, modal);
        
        this.dragonManager = dManager;
        this.personManager = pManager;
        this.reservationManager = rManager;
        this.model = model;
        
        initComponents();
        
        GUIUtils.setMarkSpinnerOnFocus(fromHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(fromMinuteSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toMinuteSpinner);
        
        
        setLocationRelativeTo(parent);
        setVisible(modal);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelFrom = new javax.swing.JLabel();
        labelTo = new javax.swing.JLabel();
        addReservationButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        dragonsScrollPane = new javax.swing.JScrollPane();
        dragonsTable = new javax.swing.JTable();
        peopleScrollPane = new javax.swing.JScrollPane();
        peopleTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        fromDatePicker = new org.jdesktop.swingx.JXDatePicker();
        fromHourSpinner = new javax.swing.JSpinner();
        fromMinuteSpinner = new javax.swing.JSpinner();
        toDatePicker = new org.jdesktop.swingx.JXDatePicker();
        toHourSpinner = new javax.swing.JSpinner();
        toMinuteSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dragonrental/gui/language"); // NOI18N
        labelFrom.setText(bundle.getString("from")); // NOI18N

        labelTo.setText(bundle.getString("to")); // NOI18N

        addReservationButton.setText(bundle.getString("add")); // NOI18N
        addReservationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addReservationButtonMouseClicked(evt);
            }
        });

        jSplitPane1.setDividerLocation(350);

        dragonsTable.setModel(new DragonTableModel(dragonManager));
        dragonsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dragonsTable.getTableHeader().setReorderingAllowed(false);
        dragonsScrollPane.setViewportView(dragonsTable);

        jSplitPane1.setRightComponent(dragonsScrollPane);

        peopleTable.setModel(new PeopleTableModel(personManager));
        peopleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        peopleScrollPane.setViewportView(peopleTable);

        jSplitPane1.setLeftComponent(peopleScrollPane);

        cancelButton.setText(bundle.getString("cancel")); // NOI18N
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });

        fromDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        fromHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        fromHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        fromHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromHourSpinnerFocusGained(evt);
            }
        });

        fromMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        fromMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        toDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        toHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        toHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        toHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toHourSpinnerFocusGained(evt);
            }
        });

        toMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        toMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFrom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(labelTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fromMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(toDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelFrom)
                        .addComponent(labelTo)
                        .addComponent(addReservationButton)
                        .addComponent(cancelButton)
                        .addComponent(fromDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addReservationButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addReservationButtonMouseClicked
        Reservation reservation = new Reservation();
        
        reservation.setId(null);
            int selectedPersonRow = peopleTable.getSelectedRow();
            if(selectedPersonRow == -1) {
                JOptionPane.showMessageDialog(
                    this,
                    bundle.getString("noPersonSelected"),
                    bundle.getString("addReservationError"),
                    JOptionPane.WARNING_MESSAGE
                                            );
                return;
            }
            Person selectedPerson = (Person) ((PeopleTableModel) peopleTable.getModel()).getElementAt(selectedPersonRow);
        reservation.setBorrower(selectedPerson);
            int selectedDragonRow = dragonsTable.getSelectedRow();
            if(selectedDragonRow == -1) {
                JOptionPane.showMessageDialog(
                    this,
                    bundle.getString("noDragonSelected"),
                    bundle.getString("addReservationError"),
                    JOptionPane.WARNING_MESSAGE
                                            );
                return;
            }
            Dragon selectedDragon = (Dragon) ((DragonTableModel) dragonsTable.getModel()).getElementAt(selectedDragonRow);
        reservation.setDragon(selectedDragon);
        reservation.setFrom(GUIUtils.getLocalDateTime(fromDatePicker, fromHourSpinner, fromMinuteSpinner));
        reservation.setTo(GUIUtils.getLocalDateTime(toDatePicker, toHourSpinner, toMinuteSpinner));
        reservation.setMoneyPaid(new BigDecimal(0));
        reservation.setPricePerHour(reservation.getPricePerHourForDragon());
        
        String error = Validation.validateReservationForCreating(reservation);
        if(error != null) {
            JOptionPane.showMessageDialog(this,
                bundle.getString(error),
                bundle.getString("addReservationError"),
                JOptionPane.WARNING_MESSAGE);
        }
        else {
            new AddReservationWorker(reservation, this).execute();
        }
    }//GEN-LAST:event_addReservationButtonMouseClicked

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        dispose();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void fromHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromHourSpinnerFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_fromHourSpinnerFocusGained

    private void toHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toHourSpinnerFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toHourSpinnerFocusGained

    private class AddReservationWorker extends SwingWorker<Void,Void> {
        
        private Reservation reservation;
        private javax.swing.JDialog parent;
        private int error;
        
        public AddReservationWorker(Reservation reservation, javax.swing.JDialog parent) {
            this.reservation = reservation;
            this.parent = parent;
            this.error = 0;
        }

        @Override
        protected Void doInBackground() {
            try {
                reservationManager.createReservation(reservation);
            } 
            catch(DragonInUseException ex) {
                JOptionPane.showMessageDialog(
                        parent,
                        ex.getMessage(),
                        bundle.getString("dragonInUseError"),
                        JOptionPane.ERROR_MESSAGE
                                                );
                this.error = 1;
                return null;
            }
            catch(ServiceFailureException | ValidationException | IllegalEntityException | IllegalStateException ex) {
                JOptionPane.showMessageDialog(
                        parent,
                        ex.getMessage(),
                        bundle.getString("addReservationError"),
                        JOptionPane.ERROR_MESSAGE
                                                );
                this.error = 1;
                return null;
            }
            JOptionPane.showMessageDialog(parent,
                bundle.getString("done"),
                bundle.getString("addReservation"),
                JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
        
        @Override
        protected void done() {
            if (error == 0) {
                model.addReservation(reservation);
                model.fireTableRowsInserted(model.getRowCount(), model.getRowCount());
                parent.dispose();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addReservationButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane dragonsScrollPane;
    private javax.swing.JTable dragonsTable;
    private org.jdesktop.swingx.JXDatePicker fromDatePicker;
    private javax.swing.JSpinner fromHourSpinner;
    private javax.swing.JSpinner fromMinuteSpinner;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labelFrom;
    private javax.swing.JLabel labelTo;
    private javax.swing.JScrollPane peopleScrollPane;
    private javax.swing.JTable peopleTable;
    private org.jdesktop.swingx.JXDatePicker toDatePicker;
    private javax.swing.JSpinner toHourSpinner;
    private javax.swing.JSpinner toMinuteSpinner;
    // End of variables declaration//GEN-END:variables
}
