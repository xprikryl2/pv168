/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dragonrental.gui;

import dragonrental.backend.*;
import dragonrental.common.IllegalEntityException;
import dragonrental.common.ServiceFailureException;
import dragonrental.common.ValidationException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author zuz
 */
public class MainView extends javax.swing.JFrame {

    private DbConfig db = new DbConfig();
    
    private DragonManager dragonManager = db.dragonManager();
    private PersonManager personManager = db.personManager();
    private ReservationManager reservationManager = db.reservationManager();
    
    private ResourceBundle bundle = ResourceBundle.getBundle("dragonrental/gui/language");
    private java.net.URL imgURL = MainView.class.getResource("dragon_icon.png");
    private ImageIcon imageIcon = new ImageIcon(imgURL, "Icon");
    
    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        reservationsPanel = new javax.swing.JPanel();
        reservationsToolBar = new javax.swing.JToolBar();
        addReservationButton = new javax.swing.JButton();
        deleteReservationButton = new javax.swing.JButton();
        payReservationButton = new javax.swing.JButton();
        updateReservationButton = new javax.swing.JButton();
        listAllReservationsButton = new javax.swing.JButton();
        filterReservationsButton = new javax.swing.JButton();
        reservationsScrollPane = new javax.swing.JScrollPane();
        reservationsTable = new javax.swing.JTable();
        reservationsScrollPane1 = new javax.swing.JScrollPane();
        reservationsTable1 = new javax.swing.JTable();
        dragonsPanel = new javax.swing.JPanel();
        dragonsToolbar = new javax.swing.JToolBar();
        addDragonButton = new javax.swing.JButton();
        deleteDragonButton = new javax.swing.JButton();
        updateDragonButton = new javax.swing.JButton();
        listAllDragonsButton = new javax.swing.JButton();
        filterDragonsButton = new javax.swing.JButton();
        dragonsScrollsPane = new javax.swing.JScrollPane();
        dragonsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        addPersonButton = new javax.swing.JButton();
        deletePersonButton = new javax.swing.JButton();
        updatePersonButton = new javax.swing.JButton();
        listAllPeopleButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dragonrental/gui/language"); // NOI18N
        setTitle(bundle.getString("window.title")); // NOI18N
        setIconImage(imageIcon.getImage());

        reservationsToolBar.setRollover(true);

        addReservationButton.setText(bundle.getString("addReservation")); // NOI18N
        addReservationButton.setToolTipText("");
        addReservationButton.setFocusable(false);
        addReservationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addReservationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addReservationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addReservationButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(addReservationButton);

        deleteReservationButton.setText(bundle.getString("delete")); // NOI18N
        deleteReservationButton.setFocusable(false);
        deleteReservationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteReservationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteReservationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteReservationButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(deleteReservationButton);

        payReservationButton.setText(bundle.getString("pay")); // NOI18N
        payReservationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                payReservationButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(payReservationButton);

        updateReservationButton.setText(bundle.getString("changeEnd")); // NOI18N
        updateReservationButton.setFocusable(false);
        updateReservationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateReservationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        updateReservationButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateReservationButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(updateReservationButton);

        listAllReservationsButton.setText(bundle.getString("listAll")); // NOI18N
        listAllReservationsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAllReservationsButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(listAllReservationsButton);

        filterReservationsButton.setText(bundle.getString("filter")); // NOI18N
        filterReservationsButton.setFocusable(false);
        filterReservationsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterReservationsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterReservationsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterReservationsButtonMouseClicked(evt);
            }
        });
        reservationsToolBar.add(filterReservationsButton);

        reservationsTable.setModel(new ReservationsTableModel(reservationManager));
        reservationsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        reservationsScrollPane.setViewportView(reservationsTable);

        reservationsTable1.setModel(new ReservationsTableModel(reservationManager));
        reservationsScrollPane1.setViewportView(reservationsTable1);

        javax.swing.GroupLayout reservationsPanelLayout = new javax.swing.GroupLayout(reservationsPanel);
        reservationsPanel.setLayout(reservationsPanelLayout);
        reservationsPanelLayout.setHorizontalGroup(
            reservationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservationsToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addComponent(reservationsScrollPane))
                .addContainerGap())
        );
        reservationsPanelLayout.setVerticalGroup(
            reservationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reservationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reservationsToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservationsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("reservations"), reservationsPanel); // NOI18N

        dragonsToolbar.setRollover(true);

        addDragonButton.setText(bundle.getString("add")); // NOI18N
        addDragonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDragonButtonActionPerformed(evt);
            }
        });
        dragonsToolbar.add(addDragonButton);

        deleteDragonButton.setText(bundle.getString("delete")); // NOI18N
        deleteDragonButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteDragonButtonMouseClicked(evt);
            }
        });
        dragonsToolbar.add(deleteDragonButton);

        updateDragonButton.setText(bundle.getString("update")); // NOI18N
        updateDragonButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateDragonButtonMouseClicked(evt);
            }
        });
        dragonsToolbar.add(updateDragonButton);

        listAllDragonsButton.setText(bundle.getString("list_all_dragons")); // NOI18N
        listAllDragonsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAllDragonsButtonMouseClicked(evt);
            }
        });
        dragonsToolbar.add(listAllDragonsButton);

        filterDragonsButton.setText(bundle.getString("filter")); // NOI18N
        filterDragonsButton.setFocusable(false);
        filterDragonsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterDragonsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterDragonsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterDragonsButtonMouseClicked(evt);
            }
        });
        dragonsToolbar.add(filterDragonsButton);

        dragonsTable.setModel(new DragonTableModel(dragonManager));
        dragonsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dragonsScrollsPane.setViewportView(dragonsTable);

        javax.swing.GroupLayout dragonsPanelLayout = new javax.swing.GroupLayout(dragonsPanel);
        dragonsPanel.setLayout(dragonsPanelLayout);
        dragonsPanelLayout.setHorizontalGroup(
            dragonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dragonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dragonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dragonsToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addComponent(dragonsScrollsPane))
                .addContainerGap())
        );
        dragonsPanelLayout.setVerticalGroup(
            dragonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dragonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dragonsToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dragonsScrollsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("dragons"), dragonsPanel); // NOI18N

        jToolBar3.setRollover(true);

        addPersonButton.setText(bundle.getString("add")); // NOI18N
        addPersonButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPersonButtonMouseClicked(evt);
            }
        });
        addPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(addPersonButton);

        deletePersonButton.setText(bundle.getString("delete")); // NOI18N
        deletePersonButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletePersonButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(deletePersonButton);

        updatePersonButton.setText(bundle.getString("update")); // NOI18N
        updatePersonButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatePersonButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(updatePersonButton);

        listAllPeopleButton.setText(bundle.getString("listAllPeople")); // NOI18N
        listAllPeopleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAllPeopleButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(listAllPeopleButton);

        filterButton.setText(bundle.getString("filter")); // NOI18N
        filterButton.setFocusable(false);
        filterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(filterButton);

        jTable3.setModel(new PeopleTableModel(personManager));
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("people"), jPanel3); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        jMenu1.setText("Menu");

        jMenuItem3.setText(bundle.getString("exit")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu3.setText(bundle.getString("help")); // NOI18N

        jMenuItem1.setText(bundle.getString("help")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);
        jMenu3.add(jSeparator2);

        jMenuItem2.setText(bundle.getString("about")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPersonButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPersonButtonMouseClicked
        new NewPersonDialog(this, true, personManager, (PeopleTableModel) jTable3.getModel());
    }//GEN-LAST:event_addPersonButtonMouseClicked

    private void listAllPeopleButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAllPeopleButtonMouseClicked
        PeopleTableModel model = (PeopleTableModel) jTable3.getModel();
        model.updateData();
        model.fireTableRowsInserted(0, model.getRowCount());
    }//GEN-LAST:event_listAllPeopleButtonMouseClicked

    private void deletePersonButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePersonButtonMouseClicked
        int selectedRow = jTable3.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("deletePerson"),
                JOptionPane.WARNING_MESSAGE);
        }
        
        if(selectedRow > -1 && selectedRow <= jTable3.getRowCount()) {       
            new DeletePersonWorker(this, (PeopleTableModel) jTable3.getModel(), selectedRow).execute();
        }
    }//GEN-LAST:event_deletePersonButtonMouseClicked

    private void updatePersonButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatePersonButtonMouseClicked
        int selectedRow = jTable3.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("updatePerson"),
                JOptionPane.WARNING_MESSAGE);
        }
        
        if(selectedRow > -1 && selectedRow <= jTable3.getRowCount()) {
            PeopleTableModel model = (PeopleTableModel) jTable3.getModel();
            new UpdatePersonDialog(this, true, personManager, selectedRow, model);
        }
    }//GEN-LAST:event_updatePersonButtonMouseClicked

    private void filterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterButtonMouseClicked
        new FilterPersonDialog(this, true, personManager, (PeopleTableModel) jTable3.getModel());
    }//GEN-LAST:event_filterButtonMouseClicked

    private void addReservationButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addReservationButtonMouseClicked
        new NewReservationDialog(this, true, dragonManager, personManager, reservationManager, (ReservationsTableModel) reservationsTable.getModel());
    }//GEN-LAST:event_addReservationButtonMouseClicked

    private void addPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addPersonButtonActionPerformed

    private void addDragonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDragonButtonActionPerformed
        new NewDragonDialog(this, true, dragonManager, (DragonTableModel) dragonsTable.getModel());
    }//GEN-LAST:event_addDragonButtonActionPerformed

    private void updateDragonButtonMouseClicked(java.awt.event.MouseEvent evt) {                                                
        int selectedRow = dragonsTable.getSelectedRow();

	if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("error"),
                JOptionPane.WARNING_MESSAGE);
        }
        
        if(selectedRow > -1 && selectedRow <= dragonsTable.getRowCount()) {
            DragonTableModel model = (DragonTableModel) dragonsTable.getModel();
            new UpdateDragonDialog(this, true, dragonManager, model, selectedRow);
        }
        
    }                                               

    private void filterDragonsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterDragonsButtonMouseClicked
        new FilterDragonDialog(this, true, dragonManager, (DragonTableModel) dragonsTable.getModel());
    }//GEN-LAST:event_filterDragonsButtonMouseClicked

    private void listAllDragonsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAllDragonsButtonMouseClicked
        listAllDragonsButton.setEnabled(false);
        DragonTableModel model = (DragonTableModel) dragonsTable.getModel();
        model.updateData();
        model.fireTableRowsInserted(0, model.getRowCount());
        listAllDragonsButton.setEnabled(true);
    }//GEN-LAST:event_listAllDragonsButtonMouseClicked

    private void deleteDragonButtonMouseClicked(java.awt.event.MouseEvent evt) {                                                
        int selectedRow = dragonsTable.getSelectedRow();

	if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
		bundle.getString("error"),
                JOptionPane.WARNING_MESSAGE);
        }
        
        if(selectedRow > -1 && selectedRow <= dragonsTable.getRowCount()) {
            new DeleteDragonWorker(this, (DragonTableModel) dragonsTable.getModel(), selectedRow).execute();
        }
    }    

    private void deleteReservationButtonMouseClicked(java.awt.event.MouseEvent evt) {                                                     
        int selectedRow = reservationsTable.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("deleteReservation"),
                JOptionPane.WARNING_MESSAGE);
        }
        
        if(selectedRow > -1 && selectedRow <= reservationsTable.getRowCount()) {       
            new DeleteReservationWorker(this, (ReservationsTableModel) reservationsTable.getModel(), selectedRow).execute();
        }
    }                                               

    private void updateReservationButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateReservationButtonMouseClicked
        int selectedRow = reservationsTable.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("updateReservation"),
                JOptionPane.WARNING_MESSAGE);
        }
        if(selectedRow > -1 && selectedRow <= reservationsTable.getRowCount()) {
            new UpdateReservationDialog(this, true, reservationManager, selectedRow, (ReservationsTableModel) reservationsTable.getModel());
        }
    }//GEN-LAST:event_updateReservationButtonMouseClicked

    private void listAllReservationsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAllReservationsButtonMouseClicked
        ReservationsTableModel model = (ReservationsTableModel) reservationsTable.getModel();
        model.updateData();
        model.fireTableRowsInserted(0, model.getRowCount());
    }//GEN-LAST:event_listAllReservationsButtonMouseClicked

    private void filterReservationsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterReservationsButtonMouseClicked
        new FilterReservationDialog(this, true, dragonManager, personManager, reservationManager,(ReservationsTableModel) reservationsTable.getModel());
    }//GEN-LAST:event_filterReservationsButtonMouseClicked

    private void payReservationButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_payReservationButtonMouseClicked
        int selectedRow = reservationsTable.getSelectedRow();
        
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                bundle.getString("noRowSelected"),
                bundle.getString("updateReservation"),
                JOptionPane.WARNING_MESSAGE);
        }
        if(selectedRow > -1 && selectedRow <= reservationsTable.getRowCount()) {
            new PayReservationDialog(this, true, reservationManager, selectedRow, (ReservationsTableModel) reservationsTable.getModel());
        }
    }//GEN-LAST:event_payReservationButtonMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(this,
                bundle.getString("aboutText"),
                bundle.getString("about"),
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this,
                bundle.getString("helpText"),
                bundle.getString("help"),
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDragonButton;
    private javax.swing.JButton addPersonButton;
    private javax.swing.JButton addReservationButton;
    private javax.swing.JButton deleteDragonButton;
    private javax.swing.JButton deletePersonButton;
    private javax.swing.JButton deleteReservationButton;
    private javax.swing.JPanel dragonsPanel;
    private javax.swing.JScrollPane dragonsScrollsPane;
    private javax.swing.JTable dragonsTable;
    private javax.swing.JToolBar dragonsToolbar;
    private javax.swing.JButton filterButton;
    private javax.swing.JButton filterDragonsButton;
    private javax.swing.JButton filterReservationsButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable3;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JButton listAllDragonsButton;
    private javax.swing.JButton listAllPeopleButton;
    private javax.swing.JButton listAllReservationsButton;
    private javax.swing.JButton payReservationButton;
    private javax.swing.JPanel reservationsPanel;
    private javax.swing.JScrollPane reservationsScrollPane;
    private javax.swing.JScrollPane reservationsScrollPane1;
    private javax.swing.JTable reservationsTable;
    private javax.swing.JTable reservationsTable1;
    private javax.swing.JToolBar reservationsToolBar;
    private javax.swing.JButton updateDragonButton;
    private javax.swing.JButton updatePersonButton;
    private javax.swing.JButton updateReservationButton;
    // End of variables declaration//GEN-END:variables

    private class DeletePersonWorker extends SwingWorker<Void,Void> {

        private PeopleTableModel model;
        private Person person;
        private int row;
        private MainView parent;
        private boolean error;
        
        public DeletePersonWorker(MainView parent, PeopleTableModel model, int row) {
            this.parent = parent;
            this.row = row;
            this.model = model;
            this.person = (Person) model.getElementAt(row);
            this.error = false;
        }
        
        @Override
        protected Void doInBackground() {
            ReservationFilter filter = (new ReservationFilter()).withBorrower(person.getId());
            if (reservationManager.findReservation(filter).isEmpty()){
                try {
                    personManager.deletePerson(person);
                } 
                catch(ServiceFailureException | ValidationException | IllegalEntityException | IllegalStateException ex) {
                    JOptionPane.showMessageDialog(parent,
                    ex.getMessage(),
                    bundle.getString("error"),
                    JOptionPane.ERROR_MESSAGE);
                    this.error = true;
                }
            }
            else {
                JOptionPane.showMessageDialog(parent,
                    bundle.getString("error_deleting_person"),
                    bundle.getString("error"),
                    JOptionPane.WARNING_MESSAGE);
                    this.error = true;
                    return null;
            }
            return null;
        }
        
        @Override
        protected void done() {
            if(!error) {
                model.deletePersonAt(row);
                model.fireTableRowsDeleted(row, row);
            }
        }
    }

    private class DeleteDragonWorker extends SwingWorker<Void,Void> {

        private DragonTableModel model;
        private Dragon dragon;
        private int row;
        private MainView parent;
        private boolean error;
        
        public DeleteDragonWorker(MainView parent, DragonTableModel model, int row) {
            this.parent = parent;
            this.row = row;
            this.model = model;
            this.dragon = (Dragon) model.getElementAt(row);
            this.error = false;
        }
        
        @Override
        protected Void doInBackground() {
            ReservationFilter filter = (new ReservationFilter()).withDragon(dragon.getId());
            if (reservationManager.findReservation(filter).isEmpty()){
                try {
                    dragonManager.removeDragon(dragon);
                } 
                catch(ServiceFailureException | ValidationException | IllegalEntityException | IllegalStateException ex) {
                    JOptionPane.showMessageDialog(parent,
                    ex.getMessage(),
                    bundle.getString("error"),
                    JOptionPane.ERROR_MESSAGE);
                    this.error = true;
                }
            }
            else {
                JOptionPane.showMessageDialog(parent,
                    bundle.getString("error_deleting_dragon"),
                    bundle.getString("error"),
                    JOptionPane.WARNING_MESSAGE);
                error = true;
                return null;
            }
	    return null;
        }
        
        @Override
        protected void done() {
	    if(!error) {
                JOptionPane.showMessageDialog(parent,
                    bundle.getString("dragon_deleted"),
                    bundle.getString("done"),
                    JOptionPane.INFORMATION_MESSAGE);
                model.deleteDragonAt(row);
                model.fireTableRowsDeleted(row, row);
            }
	}
    }
    
    private class DeleteReservationWorker extends SwingWorker<Void, Void> {
        
        private ReservationsTableModel model;
        private int row;
        private int error = 0;
        private Reservation reservation;

        public DeleteReservationWorker(MainView parent, ReservationsTableModel model, int row) {
            this.model = model;
            this.row = row;
            this.reservation = model.getElementAt(row);
        }

        @Override
        protected Void doInBackground() throws Exception {
            reservationManager.removeReservation(reservation);
            return null;
        }
        
        @Override
        protected void done() {
            if(error == 0) {
                model.deleteReservationAt(row);
                model.fireTableRowsDeleted(row, row);
            }
        }
    }

}
