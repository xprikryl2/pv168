/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dragonrental.gui;

import dragonrental.backend.*;
import dragonrental.common.*;
import java.awt.Component;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author zuz
 */
public class FilterReservationDialog extends javax.swing.JFrame {
    
    private java.awt.Frame parent;
    private DragonManager dragonManager;
    private PersonManager personManager;
    private ReservationManager reservationManager;
    private ReservationsTableModel model;
    private final ResourceBundle bundle = ResourceBundle.getBundle("dragonrental/gui/language");
    
    private ReservationFilter filter;

    /**
     * Creates new form FilterReservationDialog
     */
    public FilterReservationDialog(java.awt.Frame parent, boolean modal, DragonManager dManager, PersonManager pManager, ReservationManager rManager, ReservationsTableModel model) {
        //super(parent, modal);
        
        this.dragonManager = dManager;
        this.personManager = pManager;
        this.reservationManager = rManager;
        this.model = model;
        this.parent = parent;
        
        initComponents();
        borrowerComboBox.insertItemAt(null, 0);
        borrowerComboBox.setSelectedIndex(0);
        dragonComboBox.insertItemAt(null, 0);
        dragonComboBox.setSelectedIndex(0);
        
        GUIUtils.setMarkSpinnerOnFocus(fromAfterHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(fromAfterMinuteSpinner);
        GUIUtils.setMarkSpinnerOnFocus(fromBeforeHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(fromBeforeMinuteSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toAfterHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toAfterMinuteSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toBeforeHourSpinner);
        GUIUtils.setMarkSpinnerOnFocus(toBeforeMinuteSpinner);
        
        setLocationRelativeTo(parent);
        setVisible(modal);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        pricePerHourMoreThanTextField = new javax.swing.JTextField();
        moneyPaidMoreThanTextField = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        borrowerComboBox = new javax.swing.JComboBox<>();
        dragonComboBox = new javax.swing.JComboBox<>();
        pricePerHourLessThanTextField = new javax.swing.JTextField();
        moneyPaidLessThanTextField = new javax.swing.JTextField();
        activeCheckBox = new javax.swing.JCheckBox();
        unpaidCheckBox = new javax.swing.JCheckBox();
        fromAfterDatePicker = new org.jdesktop.swingx.JXDatePicker();
        fromAfterHourSpinner = new javax.swing.JSpinner();
        fromAfterMinuteSpinner = new javax.swing.JSpinner();
        fromBeforeDatePicker = new org.jdesktop.swingx.JXDatePicker();
        fromBeforeHourSpinner = new javax.swing.JSpinner();
        fromBeforeMinuteSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        toAfterDatePicker = new org.jdesktop.swingx.JXDatePicker();
        toAfterHourSpinner = new javax.swing.JSpinner();
        toAfterMinuteSpinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        toBeforeDatePicker = new org.jdesktop.swingx.JXDatePicker();
        toBeforeHourSpinner = new javax.swing.JSpinner();
        toBeforeMinuteSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dragonrental/gui/language"); // NOI18N
        jLabel1.setText(bundle.getString("reservationFilter")); // NOI18N

        jLabel2.setText(bundle.getString("isAfter:")); // NOI18N

        jLabel3.setText(bundle.getString("reservationEnd")); // NOI18N

        jLabel4.setText(bundle.getString("borrower")); // NOI18N

        jLabel5.setText(bundle.getString("dragon")); // NOI18N

        jLabel6.setText(bundle.getString("pricePerHour")); // NOI18N

        jLabel7.setText(bundle.getString("moneyPaid")); // NOI18N

        pricePerHourMoreThanTextField.setToolTipText(bundle.getString("minimum")); // NOI18N

        moneyPaidMoreThanTextField.setToolTipText(bundle.getString("minimum")); // NOI18N

        filterButton.setText("Filter");
        filterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterButtonMouseClicked(evt);
            }
        });

        borrowerComboBox.setModel(new DefaultComboBoxModel(personManager.listAllPeople().toArray()));
        borrowerComboBox.setToolTipText(bundle.getString("selectBorrower")); // NOI18N
        borrowerComboBox.setRenderer(new PersonRenderer());
        borrowerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowerComboBoxActionPerformed(evt);
            }
        });

        dragonComboBox.setModel(new DefaultComboBoxModel(dragonManager.listAllDragons().toArray()));
        dragonComboBox.setToolTipText(bundle.getString("selectDragon")); // NOI18N
        dragonComboBox.setRenderer(new DragonRenderer());

        pricePerHourLessThanTextField.setToolTipText(bundle.getString("maximum")); // NOI18N

        moneyPaidLessThanTextField.setToolTipText(bundle.getString("maximum")); // NOI18N

        activeCheckBox.setText(bundle.getString("onyActive")); // NOI18N

        unpaidCheckBox.setText(bundle.getString("onlyUnpaid")); // NOI18N

        fromAfterDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        fromAfterHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        fromAfterHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        fromAfterHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromAfterHourSpinnerFocusGained(evt);
            }
        });

        fromAfterMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        fromAfterMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        fromBeforeDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        fromBeforeHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        fromBeforeHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        fromBeforeHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromBeforeHourSpinnerFocusGained(evt);
            }
        });

        fromBeforeMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        fromBeforeMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        jLabel8.setText(bundle.getString("isBefore:")); // NOI18N

        jLabel9.setText(bundle.getString("reservationStart")); // NOI18N

        jLabel10.setText(bundle.getString("isAfter:")); // NOI18N

        toAfterDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        toAfterHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        toAfterHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        toAfterHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toAfterHourSpinnerFocusGained(evt);
            }
        });

        toAfterMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        toAfterMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        jLabel11.setText(bundle.getString("isBefore:")); // NOI18N

        toBeforeDatePicker.setToolTipText(bundle.getString("date")); // NOI18N

        toBeforeHourSpinner.setModel(new SpinnerNumberModel(0, 0, 23, 1));
        toBeforeHourSpinner.setToolTipText(bundle.getString("hour")); // NOI18N
        toBeforeHourSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toBeforeHourSpinnerFocusGained(evt);
            }
        });

        toBeforeMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 59, 1));
        toBeforeMinuteSpinner.setToolTipText(bundle.getString("minute")); // NOI18N

        jLabel12.setText("-");

        jLabel13.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fromAfterDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromAfterHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromAfterMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(fromBeforeDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromBeforeHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromBeforeMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(borrowerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dragonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pricePerHourMoreThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(moneyPaidMoreThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(moneyPaidLessThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pricePerHourLessThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(unpaidCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(toAfterDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toAfterHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toAfterMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(toBeforeDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toBeforeHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toBeforeMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(activeCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fromAfterDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromAfterHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromAfterMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromBeforeDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromBeforeHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromBeforeMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(toAfterDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toAfterHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toAfterMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toBeforeDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toBeforeHourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toBeforeMinuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(borrowerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dragonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pricePerHourLessThanTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(pricePerHourMoreThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(moneyPaidMoreThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(moneyPaidLessThanTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(activeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unpaidCheckBox)
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filterButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void borrowerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowerComboBoxActionPerformed

    private void filterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterButtonMouseClicked
        filter = new ReservationFilter();
        
        filter.withBorrower(
                (Person) borrowerComboBox.getSelectedItem() == null ? 
                        null : 
                        ((Person) borrowerComboBox.getSelectedItem()).getId()
                                );
        filter.withDragon(
                (Dragon) dragonComboBox.getSelectedItem() == null ?
                        null :
                        ((Dragon) dragonComboBox.getSelectedItem()).getId()
                                );
        
        try {
            
            filter.withFromIsAfter(GUIUtils.getLocalDateTime(fromAfterDatePicker, fromAfterHourSpinner, fromAfterMinuteSpinner));
            filter.withFromIsBefore(GUIUtils.getLocalDateTime(fromBeforeDatePicker, fromBeforeHourSpinner, fromBeforeMinuteSpinner));
            filter.withToIsAfter(GUIUtils.getLocalDateTime(toAfterDatePicker, toAfterHourSpinner, toAfterMinuteSpinner));
            filter.withToIsBefore(GUIUtils.getLocalDateTime(toBeforeDatePicker, toBeforeHourSpinner, toBeforeMinuteSpinner));
            
        } catch(DateTimeParseException ex) {
            JOptionPane.showMessageDialog(
                        parent,
                        bundle.getString("wrongDateTimeFormat"),
                        bundle.getString("filterReservationError"),
                        JOptionPane.ERROR_MESSAGE
                                                );
        }
        
        try {
            filter.withMoneyPaidIsLessThan(stringToBigDecimal(moneyPaidLessThanTextField.getText()));
            filter.withMoneyPaidIsMoreThan(stringToBigDecimal(moneyPaidMoreThanTextField.getText()));
            filter.withPricePerHourIsLessThan(stringToBigDecimal(pricePerHourLessThanTextField.getText()));
            filter.withPricePerHourIsMoreThan(stringToBigDecimal(pricePerHourMoreThanTextField.getText()));
        } catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(
                        parent,
                        bundle.getString("wrongNumberFormat"),
                        bundle.getString("filterReservationError"),
                        JOptionPane.ERROR_MESSAGE
                                                );
        }
        filter.withOnlyActive(activeCheckBox.isSelected());
        filter.withOnlyUnpaid(unpaidCheckBox.isSelected());
        
        new FilterReservationWorker().execute();
    }//GEN-LAST:event_filterButtonMouseClicked

    private void fromBeforeHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromBeforeHourSpinnerFocusGained
        
    }//GEN-LAST:event_fromBeforeHourSpinnerFocusGained

    private void toAfterHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toAfterHourSpinnerFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toAfterHourSpinnerFocusGained

    private void toBeforeHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toBeforeHourSpinnerFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toBeforeHourSpinnerFocusGained

    private void fromAfterHourSpinnerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromAfterHourSpinnerFocusGained
        
    }//GEN-LAST:event_fromAfterHourSpinnerFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JComboBox<String> borrowerComboBox;
    private javax.swing.JComboBox<String> dragonComboBox;
    private javax.swing.JButton filterButton;
    private org.jdesktop.swingx.JXDatePicker fromAfterDatePicker;
    private javax.swing.JSpinner fromAfterHourSpinner;
    private javax.swing.JSpinner fromAfterMinuteSpinner;
    private org.jdesktop.swingx.JXDatePicker fromBeforeDatePicker;
    private javax.swing.JSpinner fromBeforeHourSpinner;
    private javax.swing.JSpinner fromBeforeMinuteSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField moneyPaidLessThanTextField;
    private javax.swing.JTextField moneyPaidMoreThanTextField;
    private javax.swing.JTextField pricePerHourLessThanTextField;
    private javax.swing.JTextField pricePerHourMoreThanTextField;
    private org.jdesktop.swingx.JXDatePicker toAfterDatePicker;
    private javax.swing.JSpinner toAfterHourSpinner;
    private javax.swing.JSpinner toAfterMinuteSpinner;
    private org.jdesktop.swingx.JXDatePicker toBeforeDatePicker;
    private javax.swing.JSpinner toBeforeHourSpinner;
    private javax.swing.JSpinner toBeforeMinuteSpinner;
    private javax.swing.JCheckBox unpaidCheckBox;
    // End of variables declaration//GEN-END:variables

    public class FilterReservationWorker extends SwingWorker<Void, Void> {

        private List<Reservation> reservations;
        private int error = 0;
        
        @Override
        protected Void doInBackground() throws Exception {
            try {
                reservations = reservationManager.findReservation(filter);
            } catch(ServiceFailureException | ValidationException ex) {
                JOptionPane.showMessageDialog(
                        parent,
                        ex.getMessage(),
                        bundle.getString("filterReservationError"),
                        JOptionPane.ERROR_MESSAGE
                                                );
                this.error = 1;
                return null;
            }
            return null;
        }
        
        @Override
        protected void done() {
            if (error == 0) {
                model.setReservations(this.reservations);
                model.fireTableDataChanged();
            }
        }
    }
    
    private class PersonRenderer implements ListCellRenderer {
        protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
            
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel component = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Person person = (Person) value;
            component.setText(value == null ? '-'+bundle.getString("any")+'-' : person.getName() + ' ' + person.getSurname());
            return component;
        }
    }
    
    private class DragonRenderer implements ListCellRenderer {
        protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
            
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel component = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Dragon dragon = (Dragon) value;
            component.setText(value == null ? '-'+bundle.getString("any")+'-' : dragon.getName());
            return component;
        }
    }

    private LocalDateTime stringToLocalDateTime(String string) {
        LocalDateTime dateTime = null;
        if (!string.equals("")) {
            dateTime = LocalDateTime.parse(string.replace(' ', 'T'));
        }
        return dateTime;
    }
    
    private BigDecimal stringToBigDecimal(String string) {
        BigDecimal number = null;
        if (!string.equals("")) {
            number = new BigDecimal(string);
        }
        return number;
    }
    
}
